clear all;
close all;
sourceNumber = 1000;
N_sc = 48;
N_EDT = 4;
%carrier_state = zeros(1,carrier_num); %Boolean
%Traffic generation
rate = 0.61;%FEC coding rate
M = 4;%Modulation: QPSK
N_pk = 0;%Average number of packets, related to G
T_EDT = 1;%Single EDT duration
packet_bit =328;%Packet bit length
%replica_set = [1, 2, 3]; % DSA
count=1;
simulationTime = floor(1e3*0.384); %Number of time unit (384ms)
maxRetransmissionTrial = 3; %Maximum number of retransmission trial
RetransmissionTrial = zeros(1,sourceNumber);
sample = 2;
maxload = 40;
Max_backoff = 1; %先不使用BO
Waiting_queue_size = 11; 
Single_packet_BLER = 0.01; %R2-2407502
Backoff_recorder = zeros(1,simulationTime);
%加入ACB
ACB_factor = 1;

% QPSK 傳輸錯誤相關參數
%{
SNR_dB = 4.8; % 從通道模型推估
SNR = 10^(SNR_dB/10); % 線性值
SER_QPSK = 2 * qfunc(sqrt(2 * SNR)); % 符號誤碼率
BER_QPSK = SER_QPSK / log2(M); % 位元誤碼率 (M=4, QPSK)
PLR = 1-(1-BER_QPSK)^packet_bit;
%}
PLR = 1e-2;
%Parameter_Setting = [1 0; 2 0; 1 6; 2 6; 1 12; 2 12];
Parameter_Setting = [1 2; 1 3; 1 4; 2 3; 2 4; 3 4];

for idx = 1:length(Parameter_Setting)
    N_replica = Parameter_Setting(idx,1); % 当前replica数
    N_R_replica = Parameter_Setting(idx,2);
    N_re = 0;
    N_main = N_sc-N_re;
    count = 1;
    for G= sample:sample:maxload %Simulation for different traffic load. Unit: kbps
        backoffTimers = -1*ones(1, sourceNumber); % Track backoff state for each source       
        RetransmissionTrial = zeros(1, sourceNumber); %R ecord the number of retransmission trial
        Delay = zeros(1, sourceNumber);
        Waiting_queue = zeros(1,sourceNumber); %Waiting queue when the UE is executing backoff
        RTT_blocked = zeros(1,sourceNumber); %When succeful, still need to wait RTT.
        %Generate Poisson arrival
        G_ = G*1000;
        N_pk = G_*T_EDT/packet_bit;
        lambda = N_pk; %Calculate average number of packets
        attemptSource = zeros(N_EDT,N_sc);
        pcktTransmissionAttempts = 0;
        ackdPacketCount = 0;
        sendPacketCount = 0;
        blockingPacketCount = 0;
        lossPacketCount = 0;
        Total_Delay = 0; 
        success_in_1 = 0;
        burstSlot = 0;
        pr = 1 - exp(-lambda/sourceNumber);  % 根據 Poisson 分佈來計算傳輸機率 此行導致throughput不隨UE量增加，因throughput只受lambda影響
        time = 0;
        %Each time slot is 384ms (4 EDT occasion with 96ms for each)
        %RRT is 510ms
        while time < simulationTime
            time = time+1;%Time pass by     
            Decoded = zeros(1,sourceNumber);
            transmissionAttemptsEachSlot = zeros(N_EDT,N_sc);
            Backoff_recorder(1,time) = backoffTimers(1);
            for source = 1:sourceNumber %For each UE
                if rand(1) <= pr %New packet coming                   
                    sendPacketCount = sendPacketCount + 1;
                    if Waiting_queue(source) < Waiting_queue_size + 1
                         Waiting_queue(source) = Waiting_queue(source)+1;
                    else
                        blockingPacketCount = blockingPacketCount+1;
                    end
                end
                if backoffTimers(source) > 0 % Check if the source is in a backoff state
                    backoffTimers(source) = backoffTimers(source) - 1; % Decrement backoff timer
                elseif RTT_blocked(source) > 0
                    RTT_blocked(source) = RTT_blocked(source)-1;
                elseif backoffTimers(source) == 0 % The timer has expired / Retransmission Attempt
                    Decoded(source) = 1; %Not decoded
                    Chosen_EDT_set = randperm(N_EDT,N_R_replica);
                    if rand(1) <= ACB_factor %ACB方法
                         access = 1;
                    else
                         access = 0;
                    end
                    if access == 1
                        for replica = 1:N_R_replica
                            if N_re == 0
                                Chosen_carrier = randi(N_sc);
                            else
                                Chosen_carrier = randi(N_re)+N_main;
                            end
                            Chosen_EDT = Chosen_EDT_set(replica);
                            transmissionAttemptsEachSlot(Chosen_EDT,Chosen_carrier) = transmissionAttemptsEachSlot(Chosen_EDT,Chosen_carrier)+1;
                            attemptSource(Chosen_EDT,Chosen_carrier) = source; %Record the UE transmitting packet
                        end
                    end
                else
                    if Waiting_queue(source) > 0 %Send a new packet
                        if rand(1) <= ACB_factor %ACB方法
                            access = 1;
                        else
                            access = 0;
                        end
                        if access == 1
                            Delay(source) = 384; %基礎傳輸時間(1次EDT，目前採用547Delay算法)
                            Waiting_queue(source) = Waiting_queue(source)-1;
                            Decoded(source) = 1; %Not decoded
                            Chosen_EDT_set = randperm(N_EDT,N_replica);
                            for replica = 1:N_replica
                                if N_re == 0
                                    Chosen_carrier = randi(N_sc);
                                else
                                    Chosen_carrier =  randi(N_main);
                                end
                                %Chosen_carrier = randi(N_sc);
                                Chosen_EDT = Chosen_EDT_set(replica);
                                transmissionAttemptsEachSlot(Chosen_EDT,Chosen_carrier) = transmissionAttemptsEachSlot(Chosen_EDT,Chosen_carrier)+1;
                                attemptSource(Chosen_EDT,Chosen_carrier) = source; %Record the UE transmitting packet
                            end
                        else
                            Delay(source) = 384; %基礎傳輸時間(1次EDT，目前採用547Delay算法)
                            Waiting_queue(source) = Waiting_queue(source)-1;
                            Decoded(source) = 1; %Not decoded
                        end
                    end
                end
            end

            
            for i = 1:N_EDT
                for j = 1:N_sc
                    if transmissionAttemptsEachSlot(i,j) == 1 %No collision, not has been decoded
                        CurrentUE = attemptSource(i,j);
                        if Decoded(CurrentUE) == 1 && rand(1) > PLR %Success % Check if the packet passes through the AWGN model
                            ackdPacketCount = ackdPacketCount + 1;
                            Decoded(CurrentUE) = 0;
                            backoffTimers(CurrentUE) = -1; %-1 means the timer is closed.
                            Total_Delay = Total_Delay + Delay(CurrentUE);
                            if RetransmissionTrial(CurrentUE)<2
                                success_in_1 = success_in_1+1;
                            end
                            RetransmissionTrial(CurrentUE) = 0; %Reset the retransmission trial
                            Delay(CurrentUE) = 0; %Reset the delay record
                            RTT_blocked(CurrentUE) = 2;
                        end
                    end
                end
            end
            for source = 1:sourceNumber
                if Decoded(source) == 1 %Failed
                    if RetransmissionTrial(source) < maxRetransmissionTrial
                        Random_backoff = randi(Max_backoff);
                        backoffTimers(source) = 1+Random_backoff; % Assign random backoff time: 2 time unit (or more)
                        Delay(source) = Delay(source) + Random_backoff*384+510;
                        RetransmissionTrial(source) = RetransmissionTrial(source)+1;
   
                    else
                        %Packet loss
                        backoffTimers(source) = -1;
                        RetransmissionTrial(source) = 0;
                        Delay(source) = 0;
                        lossPacketCount = lossPacketCount + 1;
                    end
                end
            end
        end
        loss = lossPacketCount + blockingPacketCount;
        Packet_loss_ratio(idx,count) = loss / (ackdPacketCount + loss);
        Average_Delay(idx,count) = Total_Delay/ackdPacketCount;
        BlockingRatio(idx,count) = blockingPacketCount / loss;
        Success_in_1_retransmission(idx,count) = success_in_1 / (ackdPacketCount + loss);
        count=count+1
    end
end
Average_Delay = Average_Delay/1000; %ms => s
load = sample:sample:maxload;
throughput = load.*(1-Packet_loss_ratio);
%legend_text = {'SA', 'DSA N=2', 'DSA N=3','SA,ACB', 'DSA N=2,ACB', 'DSA N=3,ACB'};
%legend_text = {'SA', 'DSA', 'SA RE6','DSA,RE6', 'SA ,RE12', 'DSA ,RE12'};
legend_text = {'1/1', '1/2', '1/3','2/2', '2/3', '3/3'};

figure(1)
plot(load(1,:),throughput(1,:), '-','color','red')
hold on;
plot(load(1,:),throughput(2,:), '-o','color','red')
hold on;
plot(load(1,:),throughput(3,:), '-^','color','red')
hold on;
plot(load(1,:),throughput(4,:), '-','color','blue')
hold on;
plot(load(1,:),throughput(5,:), '-o','color','blue')
hold on;
plot(load(1,:),throughput(6,:), '-','color','green')
hold on;
title('Average Throughput')
xlabel('G (kbps)')
%xlabel('number of frequency carriers')
ylabel('Average Throughput')
legend(legend_text,'location','southeast'); % 添加图例


figure(2)
plot(load(1,:),Packet_loss_ratio(1,:), '-','color','red')
hold on;
plot(load(1,:),Packet_loss_ratio(2,:), '-o','color','red')
hold on;
plot(load(1,:),Packet_loss_ratio(3,:), '-^','color','red')
hold on;
plot(load(1,:),Packet_loss_ratio(4,:), '-','color','blue')
hold on;
plot(load(1,:),Packet_loss_ratio(5,:), '-o','color','blue')
hold on;
plot(load(1,:),Packet_loss_ratio(6,:), '-','color','green')
hold on;
title('Packet loss ratio')
xlabel('G (kbps)')
%xlabel('number of frequency carriers')
ylabel('PLR')
set(gca, 'YScale', 'log');
legend(legend_text,'location','southeast'); % 添加图例

figure(3)
plot(load(1,:),Average_Delay(1,:), '-','color','red')
hold on;
plot(load(1,:),Average_Delay(2,:), '-o','color','red')
hold on;
plot(load(1,:),Average_Delay(3,:), '-^','color','red')
hold on;
plot(load(1,:),Average_Delay(4,:), '-','color','blue')
hold on;
plot(load(1,:),Average_Delay(5,:), '-o','color','blue')
hold on;
plot(load(1,:),Average_Delay(6,:), '-','color','green')
hold on;
title('Average Delay')
xlabel('G (kbps)')
%xlabel('number of frequency carriers')
ylabel('second')
%set(gca, 'YScale', 'log');
legend(legend_text,'location','southeast'); % 添加图例

figure(4)
plot(load(1,:),Success_in_1_retransmission(1,:), '-','color','red')
hold on;
plot(load(1,:),Success_in_1_retransmission(2,:), '-o','color','red')
hold on;
plot(load(1,:),Success_in_1_retransmission(3,:), '-^','color','red')
hold on;
plot(load(1,:),Success_in_1_retransmission(4,:), '-','color','red')
hold on;
plot(load(1,:),Success_in_1_retransmission(5,:), '-o','color','blue')
hold on;
plot(load(1,:),Success_in_1_retransmission(6,:), '-','color','green')
hold on;
title('The ratio of transmission success for at least one retransmission')
xlabel('G (kbps)')
%xlabel('number of frequency carriers')
ylabel('%')
%set(gca, 'YScale', 'log');
legend(legend_text,'location','southeast'); % 添加图例
